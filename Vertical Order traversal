class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> columnTable = new TreeMap<>();
        Queue<Pair<TreeNode, Pair<Integer, Integer>>> queue = new LinkedList<>();

        queue.offer(new Pair<>(root, new Pair<>(0, 0))); // node, (col, row)

        while (!queue.isEmpty()) {
            Pair<TreeNode, Pair<Integer, Integer>> p = queue.poll();
            TreeNode node = p.getKey();
            int col = p.getValue().getKey();
            int row = p.getValue().getValue();

            columnTable
                .computeIfAbsent(col, x -> new TreeMap<>())
                .computeIfAbsent(row, x -> new PriorityQueue<>())
                .offer(node.val);

            if (node.left != null) {
                queue.offer(new Pair<>(node.left, new Pair<>(col - 1, row + 1)));
            }

            if (node.right != null) {
                queue.offer(new Pair<>(node.right, new Pair<>(col + 1, row + 1)));
            }
        }

        List<List<Integer>> result = new ArrayList<>();

        for (TreeMap<Integer, PriorityQueue<Integer>> rows : columnTable.values()) {
            List<Integer> col = new ArrayList<>();
            for (PriorityQueue<Integer> nodes : rows.values()) {
                while (!nodes.isEmpty()) {
                    col.add(nodes.poll());
                }
            }
            result.add(col);
        }

        return result;
    }
}
